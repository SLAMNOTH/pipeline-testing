trigger:
- none

variables:
  resourceGroupName: 'winvm-$(Build.BuildId)'
  location: 'westeurope'
  templateFile: './main.bicep'
  adminUN: 'azureuser'
  # Set VM_ADMIN_PASSWORD as secret pipeline variable

stages:
## Stage 1: Build & Validate
- stage: Build
  displayName: 'Build & Validate'
  jobs:
  - job: BicepBuild
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Compile Bicep'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az bicep install
          az bicep build --file $(templateFile)
        workingDirectory: $(Build.SourcesDirectory)

    - task: AzureCLI@2
      displayName: 'Validate Template'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az deployment group validate \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters adminUsername="$(adminUN)" \
            --parameters adminPassword="$(VM_ADMIN_PASSWORD)"
        workingDirectory: $(Build.SourcesDirectory)

## Stage 2: Test Deployment
- stage: Test
  displayName: 'Test Deployment'
  dependsOn: Build
  jobs:
  - job: DeployTest
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Test'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az group create --name $(resourceGroupName)-test --location $(location)
          az deployment group create \
            --resource-group $(resourceGroupName)-test \
            --template-file $(templateFile) \
            --parameters adminUsername="$(adminUN)" \
            --parameters adminPassword="$(VM_ADMIN_PASSWORD)"
        workingDirectory: $(Build.SourcesDirectory)

## Stage 3: Production Deployment
- stage: Deploy
  displayName: 'Production Deployment'
  dependsOn: Test
  jobs:
  - job: DeployProd
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy to Production'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az group create --name $(resourceGroupName)-prod --location $(location)
          az deployment group create \
            --resource-group $(resourceGroupName)-prod \
            --template-file $(templateFile) \
            --parameters adminUsername="$(adminUN)" \
            --parameters adminPassword="$(VM_ADMIN_PASSWORD)"
        workingDirectory: $(Build.SourcesDirectory)

## Stage 4: Cleanup
- stage: Cleanup
  displayName: 'Resource Cleanup'
  dependsOn: Deploy
  condition: |
    and(
      succeeded(),
      eq(variables['Build.Reason'], 'PullRequest')
    )
  jobs:
  - job: CleanupResources
    steps:
    - task: AzureCLI@2
      displayName: 'Remove Test Resources'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az group delete --name $(resourceGroupName)-test --yes --no-wait
          az group delete --name $(resourceGroupName)-prod --yes --no-wait
