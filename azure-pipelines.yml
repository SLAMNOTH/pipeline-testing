trigger:
- none

variables:
  resourceGroupName: 'JUICT-TESTING'
  location: 'westeurope'
  templateFile: './main.bicep'
  adminUN: 'azureuser'

stages:

- stage: Build
  displayName: 'Build fase'
  jobs:
  - job: ValidateBicep
    displayName: 'Validate Bicep Syntax'
    pool:
      vmImage: 'windows-latest'  # Optimized for Windows validation
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: 'Validate Bicep File'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        inlineScript: |
          az bicep install
          az bicep build --file $(templateFile)

- stage: Test
  displayName: 'Test Infra what-if'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: TestSyntax
    displayName: 'What-if Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Run What-If Deployment'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        inlineScript: |
          az deployment group what-if \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters adminUsername="$(adminUN)" adminPassword="$(adminPASS)" || true

- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: DeployVM
    displayName: 'Deploy Windows VM'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Bicep'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        inlineScript: |
          az group create --name $(resourceGroupName) --location $(location)
          az deployment group create \
            --resource-group $(resourceGroupName) \
            --template-file $(templateFile) \
            --parameters adminUsername="$(adminUN)" adminPassword="$(adminPASS)"

    - task: AzureCLI@2
      displayName: 'Post-deployment Validation'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        inlineScript: |
          echo "NAT Gateway Public IP:"
          az network public-ip show -n natgw-pip -g $(resourceGroupName) --query ipAddress -o tsv
          
          echo "VM Public IP:"
          az network public-ip show -n win-vm-pip -g $(resourceGroupName) --query ipAddress -o tsv

- stage: Cleanup
  displayName: 'Resource Cleanup'
  dependsOn: Deploy
  condition: always()
  jobs:
  - job: DeleteResources
    displayName: 'Remove Test Resources'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Delete Resource Group'
      inputs:
        azureSubscription: 'azure-connection'
        scriptType: bash
        inlineScript: |
          az group delete --name $(resourceGroupName) --yes --no-wait
